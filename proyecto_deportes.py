# -*- coding: utf-8 -*-
"""Proyecto_deportes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hC5EnmqK8hcO5Xf6wOsvXl_69He6dqk2
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
from datetime import datetime

#Visualisation libraries
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
sns.set()
from plotly.offline import init_notebook_mode, iplot 
import plotly.graph_objs as go
import plotly.offline as py
!pip install pycountry
import pycountry
py.init_notebook_mode(connected=True)
import folium 
from folium import plugins

# Image
import numpy as np
from PIL import Image

# Animation
import matplotlib.ticker as ticker
import matplotlib.animation as animation
from IPython.display import HTML

# Graphics in retina format 
# %config InlineBackend.figure_format = 'retina' 

# Increase the default plot size and set the color scheme
plt.rcParams['figure.figsize'] = 8, 5


# Disable warnings in Anaconda
import warnings
warnings.filterwarnings('ignore')
import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

df = pd.read_csv('Forbes Richest Atheletes (Forbes Richest Athletes 1990-2020).csv')
df.head()

# Creando una copia del primer dataframe-df
df1 = df.copy()
df1.drop('S.NO',axis=1,inplace=True)
df1.info()

# Conviritiendo el texto a datetime64
df1['Year'] = df1['Year'].apply(pd.to_datetime,format='%Y')

#Set Date column as the index column.
df1['year'] = pd.DatetimeIndex(df1['Year']).year  
df1.set_index('year', inplace=True)
df1.drop('Year',axis=1,inplace=True)

# Convirtiendo el texto de la sport column a mayusculas
df1['Sport'] = df1['Sport'].str.upper()
df1

# df is the original dataframe while df1 is a copy where the Date has been set as an index column

#Cambiando nombre de Países mal nombrados:
##Como Irlanda del Norte es diferente a Irlanda, se considerarán como países distintos.
##Como filipino hace referncia a que es de Filipinas, se remplaza el termino filipino por filipinas.
dfcopy = df1.copy()
change = dfcopy['Nationality'].map(lambda x: 'Philippines' if x =='Filipino' else x)

dfcopy.drop(columns='Nationality', inplace=True)
dfc = pd.concat([dfcopy, change], axis=1)
dfc = dfc[['Name', 'Nationality', 'Current Rank', 'Previous Year Rank', 'Sport', 'earnings ($ million)']]
dfc.head()

#####   dfc es la df que se usa para los siguientes ejercicios    #####

#Limpieza de doble deporte en un atleta:
dfsep = dfc.copy()

sepExpanded = dfsep['Sport'].str.split(' / ', expand=True)
sepExpanded.columns = ['Sport', '2°Sport']
dfsep.drop(columns='Sport', inplace=True)
dfs = pd.concat([dfsep, sepExpanded], axis=1)
dfs = dfs[['Name', 'Nationality', 'Current Rank', 'Previous Year Rank', 'Sport', '2°Sport', 'earnings ($ million)']]
dfs

#Limpieza de los deportes repetidos
##Nascar es un tipo de disciplina del AUTO RACING (automovilismo en español), por lo que el termino NASCAR se cambia a AUTO RACING (NASCAR)
##NBA hace referencia al basketball, por lo que NBA se cambia a basketball
##NFL hace referencia al American Football, por lo que NFL se cambia a American Football
##F1 RACING y F1 MOTORSPORTS son F1, y como F1 es una disciplina del AUTO RACING, se renombran como AUTO RACING (F1)
##ICE HOCKEY es igual a HOCKEY

dfs['Sport'] = dfs['Sport'].str.replace('NBA', 'BASKETBALL')
dfs['Sport'] = dfs['Sport'].str.replace('NFL', 'AMERICAN FOOTBALL')

daa = dfs.copy()

ch1 = daa['Sport'].map(lambda x: 'ssf' if x =='AUTO RACING (NASCAR)' else x)

daa.drop(columns='Sport', inplace=True)
dfs1 = pd.concat([daa, ch1], axis=1)
dfs1 = dfs1[['Name', 'Nationality', 'Current Rank', 'Previous Year Rank', 'Sport', 'earnings ($ million)']]

dfs1['Sport'] = dfs1['Sport'].str.replace('NASCAR', 'AUTO RACING (NASCAR)')
dfs1['Sport'] = dfs1['Sport'].str.replace('ssf', 'AUTO RACING (NASCAR)')
dfs1['Sport'] = dfs1['Sport'].str.replace('ICE HOCKEY', 'HOCKEY')
dfs1['Sport'] = dfs1['Sport'].str.replace('F1 RACING', 'AUTO RACING (F1)')
dfs1['Sport'] = dfs1['Sport'].str.replace('F1 MOTORSPORTS', 'AUTO RACING (F1)')
dfs1

dfbob = dfs1.copy()
dfbob.to_csv('file.csv', index= False)

#Limpieza de los valores en Previous Year Rank
dfs1['Previous Year Rank'] = dfs1['Previous Year Rank'].str.replace('>10', '11')
dfs1['Previous Year Rank'] = dfs1['Previous Year Rank'].str.replace('>20', '21')
dfs1['Previous Year Rank'] = dfs1['Previous Year Rank'].str.replace('>14', '15')
dfs1['Previous Year Rank'] = dfs1['Previous Year Rank'].str.replace('?', '0')
dfs1['Previous Year Rank'] = dfs1['Previous Year Rank'].str.replace('>30', '31')
dfs1['Previous Year Rank'] = dfs1['Previous Year Rank'].str.replace('>40', '41')
dfs1['Previous Year Rank'] = dfs1['Previous Year Rank'].str.replace('>100', '101')
dfs1['Previous Year Rank'] = dfs1['Previous Year Rank'].str.replace('not ranked', '0')
dfs1['Previous Year Rank'] = dfs1['Previous Year Rank'].str.replace('none', '0')

"""# **Deportistas cuyo ranking ha subido al menos dos lugares entre 2010 y 2020**"""

df11 = dfs1.copy()

data_1020 = df11[df11.index > 2009 ]
data_1020 = data_1020[data_1020.index < 2021 ]

#data_1020['Previous Year Rank'] = data_1020['Previous Year Rank'].str.replace('nan', '0')
data_1020

"""# **Atleta con el menor número de apariciones y mayores ganancias**"""

df44 = dfs1.copy()
#Ganancia máxima de cada atleta:
at_max = pd.pivot_table(df44, index='Name', values="earnings ($ million)", aggfunc='max')

at_max['Ganancia máxima ($ million)'] = pd.Float64Index(at_max['earnings ($ million)'])
at_max.drop('earnings ($ million)',axis=1,inplace=True)
at_max = at_max.sort_values(by='Ganancia máxima ($ million)',ascending=False)[:]
at_max

df44 = dfs1.copy()
at_min = df44['Name'].value_counts().to_frame()[:]

at_min.info()
at_min.style.background_gradient(cmap='Reds')

##Respuesta=Canelo Alvarez

"""# **País con mayor número de deportes con atletas en el dataset**"""

df55 = dfs1.copy()
df55 = df55[['Nationality', 'Sport']]
paises = pd.pivot_table(df55, index=['Nationality', 'Sport'])
paises = paises.reset_index('Nationality')
paises = paises['Nationality'].value_counts().to_frame()[:6]

paises = paises.rename(columns={'Nationality': 'Número de deportes'})
paises.style.background_gradient(cmap='Reds')

### Quizás las otras disciplinas podrían ser convertidas a AUTO RACING y eso eliminaría 1 deporte
### pero para no evitar las especificaciones de disciplinas, se deja AUTO RACING como diferentes a
### AUTO RACING (NASCAR) y AUTO RACING (F1)

"""# **¿Cuántos atletas por deporte tiene cada país?**"""

df77 = dfs1.copy()
df77 = df77[['Nationality', 'Sport', 'Name' ]]
atletas = pd.pivot_table(df77, index=['Nationality', 'Sport', 'Name' ])
atletas = atletas.reset_index('Nationality')
atletas = atletas['Nationality'].value_counts().to_frame()[:]

atletas = atletas.rename(columns={'Nationality': 'Número de atletas por deporte'})
atletas.style.background_gradient(cmap='Reds')

"""# **Ganancia mínima y máxima (dentro del dataset) por deporte y por país**"""

#Consideraremos al Datasat como df porque es el archivo original.
df['Sport'] = df['Sport'].str.upper()

#Ganancia mínima y máxima por deporte
sport_min = pd.pivot_table(df, index='Sport', values='earnings ($ million)', aggfunc='min')
sport_min['Ganancia mínima ($ million)'] = pd.Float64Index(sport_min['earnings ($ million)'])
sport_min.drop('earnings ($ million)',axis=1,inplace=True)

sport_max = pd.pivot_table(df, index='Sport', values="earnings ($ million)", aggfunc='max')
sport_max['Ganancia máxima ($ million)'] = pd.Float64Index(sport_max['earnings ($ million)'])
sport_max.drop('earnings ($ million)',axis=1,inplace=True)

sport_maxmin = pd.merge(sport_max, sport_min, how="outer", on="Sport")
sport_maxmin = sport_maxmin.sort_values(by='Ganancia máxima ($ million)',ascending=False)[:]
sport_maxmin

#Consideraremos al Datasat como df porque es el archivo original.
df['Nationality'] = df['Nationality'].str.upper()

#Ganancia mínima y máxima por país
nation_min = pd.pivot_table(df, index='Nationality', values="earnings ($ million)", aggfunc='min')
nation_min['Ganancia mínima ($ million)'] = pd.Float64Index(nation_min['earnings ($ million)'])
nation_min.drop('earnings ($ million)',axis=1,inplace=True)

nation_max = pd.pivot_table(df, index='Nationality', values="earnings ($ million)", aggfunc='max')
nation_max['Ganancia máxima ($ million)'] = pd.Float64Index(nation_max['earnings ($ million)'])
nation_max.drop('earnings ($ million)',axis=1,inplace=True)

nation_maxmin = pd.merge(nation_max, nation_min, how="outer", on='Nationality')
nation_maxmin = nation_maxmin.sort_values(by='Ganancia máxima ($ million)',ascending=False)[:]
nation_maxmin

"""# **Atleta con mayores ganancias por deporte por década**"""

#Primera decada 1990-2000
p_decada = dfs1[dfs1.index < 2001]
p_decadag = pd.pivot_table(p_decada, index='Sport', values="earnings ($ million)", aggfunc='max')

#Atletas con las mayores ganancias en la primera decada 1990-2000
ant = dfs1[['Name', 'Sport','earnings ($ million)']]
p_max = pd.merge(ant, p_decadag, how="inner", on=["Sport", "earnings ($ million)"])

p_max['Década'] = '1990-2000'
p_max.set_index('Década', inplace=True)


#Segunda decada 2000-2010
s_decada = dfs1[dfs1.index > 2000 ]
s_decada = s_decada[s_decada.index < 2011 ]

s_decadag = pd.pivot_table(s_decada, index='Sport', values="earnings ($ million)", aggfunc='max')

#Atletas con las mayores ganancias en la segunda década 2000-2010
bnt = dfs1[['Name', 'Sport','earnings ($ million)']]
s_max = pd.merge(bnt, s_decadag, how="inner", on=["Sport", "earnings ($ million)"])

s_max['Década'] = '2000-2010'
s_max.set_index('Década', inplace=True)

#Tercera decada 2010-2020
t_decada = dfs1[dfs1.index > 2010 ]
t_decada = t_decada[t_decada.index < 2021 ]

t_decadag = pd.pivot_table(t_decada, index='Sport', values="earnings ($ million)", aggfunc='max')

#Atletas con las mayores ganancias en la tercera década 2010-2020
tn = dfs1[['Name', 'Sport','earnings ($ million)']]
t_max = pd.merge(tn, t_decadag, how="inner", on=["Sport", "earnings ($ million)"])

t_max['Década'] = '2010-2020'
t_max.set_index('Década', inplace=True)

#Atleta con mayores ganancias por cada deporte por década
atletas_decada = pd.concat([p_max, s_max, t_max])

atletas_decada = pd.pivot_table(atletas_decada, index=['Década', 'Sport', 'Name'],values="earnings ($ million)")

atletas_decada.style.background_gradient(cmap='Reds')

"""# **Ganancia total por cada deporte por cada año**"""

df2=dfs1.copy()

#Ganancia total por cada deporte por cada año:
ganacia_sport = pd.pivot_table(df2, index=['year', 'Sport'],values="earnings ($ million)", aggfunc='sum')
ganacia_sport = ganacia_sport.sort_values(by="year",ascending=False)[:]

ganacia_sport.style.background_gradient(cmap='Reds')